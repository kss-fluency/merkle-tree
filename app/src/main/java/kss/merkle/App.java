/*
 * This source file was generated by the Gradle 'init' task
 */
package kss.merkle;

import kss.merkle.exception.MerkleException;
import kss.merkle.model.MerkleProofItem;
import kss.merkle.model.MerkleTree;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

@Slf4j
public class App {
    public static void main(String[] args) {
        final var treeSize = 16;
        Random rand = new Random();
        List<String> randomHexStrings = IntStream.generate(() -> rand.nextInt(Integer.MAX_VALUE)).limit(treeSize)
                .mapToObj(i -> String.format("0x%08x", i)).toList();

        log.info(String.format("Generating Merkle Tree using %d chunks of random hex Strings!\n", treeSize));

        try {
            MerkleTree tree = MerkleTree.fromList(randomHexStrings);
            System.out.println("Tree generated: " + tree);

            String item = randomHexStrings.get(7);
            List<MerkleProofItem> proof = tree.generateProof(item);
            System.out.println("Proof generated: " + proof);

            System.out.println("Proof verified: " + tree.verifyProof(item, proof));

            String newRandomHexString = String.format("0x%08x", rand.nextInt(Integer.MAX_VALUE));
            tree.updateLeaf(item, newRandomHexString);
            System.out.println("Leaf number 8 was updated to " + newRandomHexString);
            System.out.println("Updated tree: " + tree);
            System.out.println("Verify proof for old item: " + tree.verifyProof(item, proof));
            List<MerkleProofItem> newProof = tree.generateProof(newRandomHexString);
            System.out.println("Verify proof for new item: " + tree.verifyProof(newRandomHexString, newProof));
        } catch (MerkleException e) {
            log.error("There was an oopsie!", e);
        }
    }
}
